{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4a935f1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dependencies\n",
    "import time\n",
    "import os\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4b6e8f5c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>info</th>\n",
       "      <th>year 1</th>\n",
       "      <th>year 2</th>\n",
       "      <th>year 3</th>\n",
       "      <th>year 4</th>\n",
       "      <th>year 5</th>\n",
       "      <th>model year</th>\n",
       "      <th>model</th>\n",
       "      <th>engine</th>\n",
       "      <th>cost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Insurance</td>\n",
       "      <td>1544</td>\n",
       "      <td>1598</td>\n",
       "      <td>1654</td>\n",
       "      <td>1712</td>\n",
       "      <td>1772</td>\n",
       "      <td>2023</td>\n",
       "      <td>Acura 2023 TLX Sedan 4dr Sedan AWD w/Advance P...</td>\n",
       "      <td>2.0L 4cyl Turbo 10A</td>\n",
       "      <td>53096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Maintenance</td>\n",
       "      <td>86</td>\n",
       "      <td>440</td>\n",
       "      <td>386</td>\n",
       "      <td>2465</td>\n",
       "      <td>2049</td>\n",
       "      <td>2023</td>\n",
       "      <td>Acura 2023 TLX Sedan 4dr Sedan AWD w/Advance P...</td>\n",
       "      <td>2.0L 4cyl Turbo 10A</td>\n",
       "      <td>53096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Repairs</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>462</td>\n",
       "      <td>707</td>\n",
       "      <td>2023</td>\n",
       "      <td>Acura 2023 TLX Sedan 4dr Sedan AWD w/Advance P...</td>\n",
       "      <td>2.0L 4cyl Turbo 10A</td>\n",
       "      <td>53096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Taxes_Fees</td>\n",
       "      <td>3347</td>\n",
       "      <td>239</td>\n",
       "      <td>214</td>\n",
       "      <td>194</td>\n",
       "      <td>194</td>\n",
       "      <td>2023</td>\n",
       "      <td>Acura 2023 TLX Sedan 4dr Sedan AWD w/Advance P...</td>\n",
       "      <td>2.0L 4cyl Turbo 10A</td>\n",
       "      <td>53096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Financing</td>\n",
       "      <td>4197</td>\n",
       "      <td>3421</td>\n",
       "      <td>2566</td>\n",
       "      <td>1628</td>\n",
       "      <td>597</td>\n",
       "      <td>2023</td>\n",
       "      <td>Acura 2023 TLX Sedan 4dr Sedan AWD w/Advance P...</td>\n",
       "      <td>2.0L 4cyl Turbo 10A</td>\n",
       "      <td>53096</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          info  year 1  year 2  year 3  year 4  year 5  model year  \\\n",
       "0    Insurance    1544    1598    1654    1712    1772        2023   \n",
       "1  Maintenance      86     440     386    2465    2049        2023   \n",
       "2      Repairs       0       0       0     462     707        2023   \n",
       "3   Taxes_Fees    3347     239     214     194     194        2023   \n",
       "4    Financing    4197    3421    2566    1628     597        2023   \n",
       "\n",
       "                                               model               engine  \\\n",
       "0  Acura 2023 TLX Sedan 4dr Sedan AWD w/Advance P...  2.0L 4cyl Turbo 10A   \n",
       "1  Acura 2023 TLX Sedan 4dr Sedan AWD w/Advance P...  2.0L 4cyl Turbo 10A   \n",
       "2  Acura 2023 TLX Sedan 4dr Sedan AWD w/Advance P...  2.0L 4cyl Turbo 10A   \n",
       "3  Acura 2023 TLX Sedan 4dr Sedan AWD w/Advance P...  2.0L 4cyl Turbo 10A   \n",
       "4  Acura 2023 TLX Sedan 4dr Sedan AWD w/Advance P...  2.0L 4cyl Turbo 10A   \n",
       "\n",
       "    cost  \n",
       "0  53096  \n",
       "1  53096  \n",
       "2  53096  \n",
       "3  53096  \n",
       "4  53096  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>info</th>\n",
       "      <th>year 1</th>\n",
       "      <th>year 2</th>\n",
       "      <th>year 3</th>\n",
       "      <th>year 4</th>\n",
       "      <th>year 5</th>\n",
       "      <th>model year</th>\n",
       "      <th>model</th>\n",
       "      <th>engine</th>\n",
       "      <th>cost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Insurance</td>\n",
       "      <td>1452</td>\n",
       "      <td>1503</td>\n",
       "      <td>1555</td>\n",
       "      <td>1610</td>\n",
       "      <td>1666</td>\n",
       "      <td>2023</td>\n",
       "      <td>Audi A3 Premium 4dr Sedan AWD w/40 TFSI</td>\n",
       "      <td>2.0L 4cyl Turbo gas/electric mild hybrid 7AM</td>\n",
       "      <td>39413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Maintenance</td>\n",
       "      <td>273</td>\n",
       "      <td>953</td>\n",
       "      <td>904</td>\n",
       "      <td>2173</td>\n",
       "      <td>1183</td>\n",
       "      <td>2023</td>\n",
       "      <td>Audi A3 Premium 4dr Sedan AWD w/40 TFSI</td>\n",
       "      <td>2.0L 4cyl Turbo gas/electric mild hybrid 7AM</td>\n",
       "      <td>39413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Repairs</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>858</td>\n",
       "      <td>1310</td>\n",
       "      <td>2023</td>\n",
       "      <td>Audi A3 Premium 4dr Sedan AWD w/40 TFSI</td>\n",
       "      <td>2.0L 4cyl Turbo gas/electric mild hybrid 7AM</td>\n",
       "      <td>39413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Taxes_Fees</td>\n",
       "      <td>2646</td>\n",
       "      <td>188</td>\n",
       "      <td>169</td>\n",
       "      <td>153</td>\n",
       "      <td>153</td>\n",
       "      <td>2023</td>\n",
       "      <td>Audi A3 Premium 4dr Sedan AWD w/40 TFSI</td>\n",
       "      <td>2.0L 4cyl Turbo gas/electric mild hybrid 7AM</td>\n",
       "      <td>39413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Financing</td>\n",
       "      <td>3117</td>\n",
       "      <td>2541</td>\n",
       "      <td>1906</td>\n",
       "      <td>1209</td>\n",
       "      <td>443</td>\n",
       "      <td>2023</td>\n",
       "      <td>Audi A3 Premium 4dr Sedan AWD w/40 TFSI</td>\n",
       "      <td>2.0L 4cyl Turbo gas/electric mild hybrid 7AM</td>\n",
       "      <td>39413</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          info  year 1  year 2  year 3  year 4  year 5  model year  \\\n",
       "0    Insurance    1452    1503    1555    1610    1666        2023   \n",
       "1  Maintenance     273     953     904    2173    1183        2023   \n",
       "2      Repairs       0       0       0     858    1310        2023   \n",
       "3   Taxes_Fees    2646     188     169     153     153        2023   \n",
       "4    Financing    3117    2541    1906    1209     443        2023   \n",
       "\n",
       "                                     model  \\\n",
       "0  Audi A3 Premium 4dr Sedan AWD w/40 TFSI   \n",
       "1  Audi A3 Premium 4dr Sedan AWD w/40 TFSI   \n",
       "2  Audi A3 Premium 4dr Sedan AWD w/40 TFSI   \n",
       "3  Audi A3 Premium 4dr Sedan AWD w/40 TFSI   \n",
       "4  Audi A3 Premium 4dr Sedan AWD w/40 TFSI   \n",
       "\n",
       "                                         engine   cost  \n",
       "0  2.0L 4cyl Turbo gas/electric mild hybrid 7AM  39413  \n",
       "1  2.0L 4cyl Turbo gas/electric mild hybrid 7AM  39413  \n",
       "2  2.0L 4cyl Turbo gas/electric mild hybrid 7AM  39413  \n",
       "3  2.0L 4cyl Turbo gas/electric mild hybrid 7AM  39413  \n",
       "4  2.0L 4cyl Turbo gas/electric mild hybrid 7AM  39413  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>info</th>\n",
       "      <th>year 1</th>\n",
       "      <th>year 2</th>\n",
       "      <th>year 3</th>\n",
       "      <th>year 4</th>\n",
       "      <th>year 5</th>\n",
       "      <th>model year</th>\n",
       "      <th>model</th>\n",
       "      <th>engine</th>\n",
       "      <th>cost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Insurance</td>\n",
       "      <td>1763</td>\n",
       "      <td>1825</td>\n",
       "      <td>1889</td>\n",
       "      <td>1955</td>\n",
       "      <td>2023</td>\n",
       "      <td>2023</td>\n",
       "      <td>Audi e-tron Chronos Edition 4dr SUV AWD</td>\n",
       "      <td>electric DD</td>\n",
       "      <td>88473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Maintenance</td>\n",
       "      <td>185</td>\n",
       "      <td>772</td>\n",
       "      <td>413</td>\n",
       "      <td>3544</td>\n",
       "      <td>1690</td>\n",
       "      <td>2023</td>\n",
       "      <td>Audi e-tron Chronos Edition 4dr SUV AWD</td>\n",
       "      <td>electric DD</td>\n",
       "      <td>88473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Repairs</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>801</td>\n",
       "      <td>1223</td>\n",
       "      <td>2023</td>\n",
       "      <td>Audi e-tron Chronos Edition 4dr SUV AWD</td>\n",
       "      <td>electric DD</td>\n",
       "      <td>88473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Taxes_Fees</td>\n",
       "      <td>5574</td>\n",
       "      <td>398</td>\n",
       "      <td>356</td>\n",
       "      <td>323</td>\n",
       "      <td>323</td>\n",
       "      <td>2023</td>\n",
       "      <td>Audi e-tron Chronos Edition 4dr SUV AWD</td>\n",
       "      <td>electric DD</td>\n",
       "      <td>88473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Financing</td>\n",
       "      <td>6998</td>\n",
       "      <td>5703</td>\n",
       "      <td>4279</td>\n",
       "      <td>2714</td>\n",
       "      <td>994</td>\n",
       "      <td>2023</td>\n",
       "      <td>Audi e-tron Chronos Edition 4dr SUV AWD</td>\n",
       "      <td>electric DD</td>\n",
       "      <td>88473</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          info  year 1  year 2  year 3  year 4  year 5  model year  \\\n",
       "0    Insurance    1763    1825    1889    1955    2023        2023   \n",
       "1  Maintenance     185     772     413    3544    1690        2023   \n",
       "2      Repairs       0       0       0     801    1223        2023   \n",
       "3   Taxes_Fees    5574     398     356     323     323        2023   \n",
       "4    Financing    6998    5703    4279    2714     994        2023   \n",
       "\n",
       "                                     model       engine   cost  \n",
       "0  Audi e-tron Chronos Edition 4dr SUV AWD  electric DD  88473  \n",
       "1  Audi e-tron Chronos Edition 4dr SUV AWD  electric DD  88473  \n",
       "2  Audi e-tron Chronos Edition 4dr SUV AWD  electric DD  88473  \n",
       "3  Audi e-tron Chronos Edition 4dr SUV AWD  electric DD  88473  \n",
       "4  Audi e-tron Chronos Edition 4dr SUV AWD  electric DD  88473  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#import data frame for combusion engine cars\n",
    "ice_df=pd.read_csv(\"Resources/Edmunds.csv\")\n",
    "display(ice_df.head())\n",
    "#import data frame for combusion engine cars\n",
    "hybrid_df=pd.read_csv(\"Resources/Edmunds_hybrid.csv\")\n",
    "display(hybrid_df.head())\n",
    "#import data frame for combusion engine cars\n",
    "ev_df=pd.read_csv(\"Resources/Edmunds_ev.csv\")\n",
    "display(ev_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "61d46dcc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#addingin column with type\n",
    "ice_df['type']='internal combustion'\n",
    "hybrid_df['type']='hybrid'\n",
    "ev_df['type']='electric'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7e883488",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'cost of internal combustion engine cars: max = 272287, min=25998, mean=64405.940377804014'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'cost of hybrid cars: max = 147655, min=13489, mean=63047.188405797104'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'cost of all electric cars: max = 112924, min=30119, mean=61693.38775510204'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#distribution of the range of cost of cars in the data set based on engine type\n",
    "display(f'cost of internal combustion engine cars: max = {ice_df[\"cost\"].max()}, min={ice_df[\"cost\"].min()}, mean={ice_df[\"cost\"].mean()}')\n",
    "display(f'cost of hybrid cars: max = {hybrid_df[\"cost\"].max()}, min={hybrid_df[\"cost\"].min()}, mean={hybrid_df[\"cost\"].mean()}')\n",
    "display(f'cost of all electric cars: max = {ev_df[\"cost\"].max()}, min={ev_df[\"cost\"].min()}, mean={ev_df[\"cost\"].mean()}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5e279805",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>info</th>\n",
       "      <th>year 1</th>\n",
       "      <th>year 2</th>\n",
       "      <th>year 3</th>\n",
       "      <th>year 4</th>\n",
       "      <th>year 5</th>\n",
       "      <th>model year</th>\n",
       "      <th>model</th>\n",
       "      <th>engine</th>\n",
       "      <th>cost</th>\n",
       "      <th>type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>338</th>\n",
       "      <td>Repairs</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>357</td>\n",
       "      <td>545</td>\n",
       "      <td>2023</td>\n",
       "      <td>Volkswagen ID.4 Standard 4dr SUV</td>\n",
       "      <td>electric DD</td>\n",
       "      <td>39993</td>\n",
       "      <td>electric</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>339</th>\n",
       "      <td>Taxes_Fees</td>\n",
       "      <td>2525</td>\n",
       "      <td>180</td>\n",
       "      <td>161</td>\n",
       "      <td>146</td>\n",
       "      <td>146</td>\n",
       "      <td>2023</td>\n",
       "      <td>Volkswagen ID.4 Standard 4dr SUV</td>\n",
       "      <td>electric DD</td>\n",
       "      <td>39993</td>\n",
       "      <td>electric</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>340</th>\n",
       "      <td>Financing</td>\n",
       "      <td>3163</td>\n",
       "      <td>2578</td>\n",
       "      <td>1934</td>\n",
       "      <td>1227</td>\n",
       "      <td>450</td>\n",
       "      <td>2023</td>\n",
       "      <td>Volkswagen ID.4 Standard 4dr SUV</td>\n",
       "      <td>electric DD</td>\n",
       "      <td>39993</td>\n",
       "      <td>electric</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>341</th>\n",
       "      <td>Depreciation</td>\n",
       "      <td>14139</td>\n",
       "      <td>1969</td>\n",
       "      <td>1865</td>\n",
       "      <td>2187</td>\n",
       "      <td>2072</td>\n",
       "      <td>2023</td>\n",
       "      <td>Volkswagen ID.4 Standard 4dr SUV</td>\n",
       "      <td>electric DD</td>\n",
       "      <td>39993</td>\n",
       "      <td>electric</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>342</th>\n",
       "      <td>Fuel</td>\n",
       "      <td>874</td>\n",
       "      <td>900</td>\n",
       "      <td>927</td>\n",
       "      <td>955</td>\n",
       "      <td>983</td>\n",
       "      <td>2023</td>\n",
       "      <td>Volkswagen ID.4 Standard 4dr SUV</td>\n",
       "      <td>electric DD</td>\n",
       "      <td>39993</td>\n",
       "      <td>electric</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             info  year 1  year 2  year 3  year 4  year 5  model year  \\\n",
       "338       Repairs       0       0       0     357     545        2023   \n",
       "339    Taxes_Fees    2525     180     161     146     146        2023   \n",
       "340     Financing    3163    2578    1934    1227     450        2023   \n",
       "341  Depreciation   14139    1969    1865    2187    2072        2023   \n",
       "342          Fuel     874     900     927     955     983        2023   \n",
       "\n",
       "                                model       engine   cost      type  \n",
       "338  Volkswagen ID.4 Standard 4dr SUV  electric DD  39993  electric  \n",
       "339  Volkswagen ID.4 Standard 4dr SUV  electric DD  39993  electric  \n",
       "340  Volkswagen ID.4 Standard 4dr SUV  electric DD  39993  electric  \n",
       "341  Volkswagen ID.4 Standard 4dr SUV  electric DD  39993  electric  \n",
       "342  Volkswagen ID.4 Standard 4dr SUV  electric DD  39993  electric  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "least=26000\n",
    "most=113000\n",
    "# concatinating data frames and removing expensive cars from analysis to match most and least expensive from each type of car\n",
    "reduced_ice_df = ice_df[(ice_df[\"cost\"]>least) & (ice_df[\"cost\"]<most)]\n",
    "reduced_hybrid_df = hybrid_df[(hybrid_df[\"cost\"]>least) & (hybrid_df[\"cost\"]<most)]\n",
    "reduced_ev_df = ev_df[(ev_df[\"cost\"]>least)& (ev_df[\"cost\"]<most)]\n",
    "#ice_hybrid_ev_df=pd.concat((reduced_ice_df, reduced_hybrid_df, reduced_ev_df), ignore_index=True)\n",
    "ice_hybrid_ev_df=pd.concat((reduced_ice_df, reduced_hybrid_df, reduced_ev_df))#, ignore_index=True)\n",
    "ice_hybrid_ev_df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3bf79116",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>engine</th>\n",
       "      <th>year 1</th>\n",
       "      <th>year 2</th>\n",
       "      <th>year 3</th>\n",
       "      <th>year 4</th>\n",
       "      <th>year 5</th>\n",
       "      <th>cost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Audi e-tron Chronos Edition 4dr SUV AWD</td>\n",
       "      <td>electric DD</td>\n",
       "      <td>53584</td>\n",
       "      <td>15723</td>\n",
       "      <td>12941</td>\n",
       "      <td>15950</td>\n",
       "      <td>12236</td>\n",
       "      <td>88473.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Audi e-tron GT Premium Plus 4dr Sedan AWD</td>\n",
       "      <td>electric 2A</td>\n",
       "      <td>26290</td>\n",
       "      <td>16832</td>\n",
       "      <td>13273</td>\n",
       "      <td>17753</td>\n",
       "      <td>12737</td>\n",
       "      <td>88666.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                       model       engine  year 1  year 2  \\\n",
       "0    Audi e-tron Chronos Edition 4dr SUV AWD  electric DD   53584   15723   \n",
       "1  Audi e-tron GT Premium Plus 4dr Sedan AWD  electric 2A   26290   16832   \n",
       "\n",
       "   year 3  year 4  year 5     cost  \n",
       "0   12941   15950   12236  88473.0  \n",
       "1   13273   17753   12737  88666.0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ev_cost = reduced_ev_df[reduced_ev_df['type']=='electric']\n",
    "ev_cost = ev_cost.groupby(['model','engine']).sum()\n",
    "ev_cost.reset_index(inplace = True)\n",
    "del ev_cost['info']\n",
    "del ev_cost['type']\n",
    "del ev_cost['model year']\n",
    "#fix summing of total cost of car by 7 years\n",
    "ev_cost['cost'] = ev_cost['cost']/7\n",
    "ev_cost.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "60e5b83f",
   "metadata": {},
   "outputs": [],
   "source": [
    "ev_insurance_df = reduced_ev_df[reduced_ev_df['type']=='electric']#.loc['Insurance']\n",
    "ev_insurance_df = ev_insurance_df.set_index('info')\n",
    "ev_insurance_df = ev_insurance_df.loc[\"Insurance\"]\n",
    "ev_insurance_df.drop(columns=['type','model year'],inplace = True)\n",
    "ev_insurance_df.reset_index(inplace=True)\n",
    "del ev_insurance_df['info']\n",
    "#ev_insurance_df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "65d3fbb5",
   "metadata": {},
   "outputs": [],
   "source": [
    "ev_maintenance_df = reduced_ev_df[reduced_ev_df['type']=='electric']#.loc['Insurance']\n",
    "ev_maintenance_df = ev_maintenance_df.set_index('info')\n",
    "ev_maintenance_df = ev_maintenance_df.loc[\"Maintenance\"]\n",
    "ev_maintenance_df.drop(columns=['type','model year'],inplace = True)\n",
    "ev_maintenance_df.reset_index(inplace=True)\n",
    "del ev_maintenance_df['info']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5f64ded5",
   "metadata": {},
   "outputs": [],
   "source": [
    "ev_repairs_df = reduced_ev_df[reduced_ev_df['type']=='electric']#.loc['Insurance']\n",
    "ev_repairs_df = ev_repairs_df.set_index('info')\n",
    "ev_repairs_df = ev_repairs_df.loc[\"Repairs\"]\n",
    "ev_repairs_df.drop(columns=['type','model year'],inplace = True)\n",
    "ev_repairs_df.reset_index(inplace=True)\n",
    "del ev_repairs_df['info']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a9a1403c",
   "metadata": {},
   "outputs": [],
   "source": [
    "ev_taxes_df = reduced_ev_df[reduced_ev_df['type']=='electric']#.loc['Insurance']\n",
    "ev_taxes_df = ev_taxes_df.set_index('info')\n",
    "ev_taxes_df = ev_taxes_df.loc[\"Taxes_Fees\"]\n",
    "ev_taxes_df.drop(columns=['type','model year'],inplace = True)\n",
    "ev_taxes_df.reset_index(inplace=True)\n",
    "del ev_taxes_df['info']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8baabd3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "ev_financing_df  = reduced_ev_df[reduced_ev_df['type']=='electric']#.loc['Insurance']\n",
    "ev_financing_df  = ev_financing_df.set_index('info')\n",
    "ev_financing_df = ev_financing_df.loc[\"Financing\"]\n",
    "ev_financing_df .drop(columns=['type','model year'],inplace = True)\n",
    "ev_financing_df.reset_index(inplace=True)\n",
    "del ev_financing_df['info']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fb235bfa",
   "metadata": {},
   "outputs": [],
   "source": [
    "ev_depreciation_df = reduced_ev_df[reduced_ev_df['type']=='electric']#.loc['Insurance']\n",
    "ev_depreciation_df  = ev_depreciation_df.set_index('info')\n",
    "ev_depreciation_df = ev_depreciation_df.loc[\"Depreciation\"]\n",
    "ev_depreciation_df .drop(columns=['type','model year'],inplace = True)\n",
    "ev_depreciation_df.reset_index(inplace=True)\n",
    "del ev_depreciation_df['info']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "13c2d68d",
   "metadata": {},
   "outputs": [],
   "source": [
    "ev_fuel_df  = reduced_ev_df[reduced_ev_df['type']=='electric']#.loc['Insurance']\n",
    "ev_fuel_df  = ev_fuel_df.set_index('info')\n",
    "ev_fuel_df = ev_fuel_df.loc['Fuel']\n",
    "ev_fuel_df .drop(columns=['type','model year'],inplace = True)\n",
    "ev_fuel_df.reset_index(inplace=True)\n",
    "del ev_fuel_df['info']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b250effd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year 1_x</th>\n",
       "      <th>year 2_x</th>\n",
       "      <th>year 3_x</th>\n",
       "      <th>year 4_x</th>\n",
       "      <th>year 5_x</th>\n",
       "      <th>model</th>\n",
       "      <th>engine</th>\n",
       "      <th>cost</th>\n",
       "      <th>year 1_y</th>\n",
       "      <th>year 2_y</th>\n",
       "      <th>year 3_y</th>\n",
       "      <th>year 4_y</th>\n",
       "      <th>year 5_y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1763</td>\n",
       "      <td>1825</td>\n",
       "      <td>1889</td>\n",
       "      <td>1955</td>\n",
       "      <td>2023</td>\n",
       "      <td>Audi e-tron Chronos Edition 4dr SUV AWD</td>\n",
       "      <td>electric DD</td>\n",
       "      <td>88473</td>\n",
       "      <td>53584</td>\n",
       "      <td>15723</td>\n",
       "      <td>12941</td>\n",
       "      <td>15950</td>\n",
       "      <td>12236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1763</td>\n",
       "      <td>1825</td>\n",
       "      <td>1889</td>\n",
       "      <td>1955</td>\n",
       "      <td>2023</td>\n",
       "      <td>Audi e-tron GT Premium Plus 4dr Sedan AWD</td>\n",
       "      <td>electric 2A</td>\n",
       "      <td>88666</td>\n",
       "      <td>26290</td>\n",
       "      <td>16832</td>\n",
       "      <td>13273</td>\n",
       "      <td>17753</td>\n",
       "      <td>12737</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   year 1_x  year 2_x  year 3_x  year 4_x  year 5_x  \\\n",
       "0      1763      1825      1889      1955      2023   \n",
       "1      1763      1825      1889      1955      2023   \n",
       "\n",
       "                                       model       engine   cost  year 1_y  \\\n",
       "0    Audi e-tron Chronos Edition 4dr SUV AWD  electric DD  88473     53584   \n",
       "1  Audi e-tron GT Premium Plus 4dr Sedan AWD  electric 2A  88666     26290   \n",
       "\n",
       "   year 2_y  year 3_y  year 4_y  year 5_y  \n",
       "0     15723     12941     15950     12236  \n",
       "1     16832     13273     17753     12737  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ev_insurance_df=pd.merge(ev_insurance_df, ev_cost, how='left', left_on=['model','engine','cost'], right_on=['model','engine','cost'])\n",
    "ev_maintenance_df=pd.merge(ev_maintenance_df, ev_cost, how='left', left_on=['model','engine','cost'], right_on=['model','engine','cost'])\n",
    "ev_repairs_df=pd.merge(ev_repairs_df, ev_cost, how='left', left_on=['model','engine','cost'], right_on=['model','engine','cost'])\n",
    "ev_taxes_df=pd.merge(ev_taxes_df, ev_cost, how='left', left_on=['model','engine','cost'], right_on=['model','engine','cost'])\n",
    "ev_financing_df=pd.merge(ev_financing_df, ev_cost, how='left', left_on=['model','engine','cost'], right_on=['model','engine','cost'])\n",
    "ev_depreciation_df=pd.merge(ev_depreciation_df, ev_cost, how='left', left_on=['model','engine','cost'], right_on=['model','engine','cost'])\n",
    "ev_fuel_df=pd.merge(ev_fuel_df, ev_cost, how='left', left_on=['model','engine','cost'], right_on=['model','engine','cost'])\n",
    "\n",
    "ev_insurance_df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "92e62530",
   "metadata": {},
   "outputs": [],
   "source": [
    "ev_fraction=pd.DataFrame(columns=['year 1'])\n",
    "ev_maintenance_fraction=pd.DataFrame(columns=['year 1'])\n",
    "ev_repairs_fraction=pd.DataFrame(columns=['year 1'])\n",
    "ev_taxes_fraction=pd.DataFrame(columns=['year 1'])\n",
    "ev_financing_fraction=pd.DataFrame(columns=['year 1'])\n",
    "ev_depreciation_fraction=pd.DataFrame(columns=['year 1'])\n",
    "ev_fuel_fraction=pd.DataFrame(columns=['year 1'])\n",
    "for i in range(5):\n",
    "    year_str = 'year '+ str(i+1)\n",
    "    ev_fraction[year_str]= ev_insurance_df[year_str+'_x']#/ev_insurance_df[year_str+'_y']*100\n",
    "    ev_maintenance_fraction[year_str] = ev_maintenance_df[year_str+'_x']#/ev_maintenance_df[year_str+'_y']*100\n",
    "    ev_repairs_fraction[year_str] = ev_repairs_df[year_str+'_x']#/ev_repairs_df[year_str+'_y']*100\n",
    "    ev_taxes_fraction[year_str] = ev_taxes_df[year_str+'_x']#/ev_taxes_df[year_str+'_y']*100\n",
    "    ev_financing_fraction[year_str] = ev_financing_df[year_str+'_x']#/ev_financing_df[year_str+'_y']*100\n",
    "    ev_depreciation_fraction[year_str] = ev_depreciation_df[year_str+'_x']#/ev_depreciation_df[year_str+'_y']*100\n",
    "    ev_fuel_fraction[year_str] = ev_fuel_df[year_str+'_x']#/ev_fuel_df[year_str+'_y']*100\n",
    "    \n",
    "    ev_fraction.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "22a97651",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(49, 6)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for i in range(ev_fraction.shape[0]):\n",
    "    ev_fraction['info'] = 'Insurance'\n",
    "    ev_maintenance_fraction['info'] = \"Maintance\"\n",
    "    ev_repairs_fraction['info'] = \"Repairs\"\n",
    "    ev_taxes_fraction['info'] = \"Taxes and Fees\"\n",
    "    ev_financing_fraction['info'] = \"Financing\"\n",
    "    ev_depreciation_fraction['info'] = \"Depreciation\"\n",
    "    ev_fuel_fraction['info'] = \"Fuel\"\n",
    "ev_fraction.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "21ba2f91",
   "metadata": {},
   "outputs": [],
   "source": [
    "ev_fraction = ev_fraction=pd.concat((ev_fraction,ev_maintenance_fraction,ev_repairs_fraction,ev_taxes_fraction,ev_financing_fraction,\n",
    "         ev_depreciation_fraction,ev_fuel_fraction), ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "93d866a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>info</th>\n",
       "      <th>Depreciation</th>\n",
       "      <th>Financing</th>\n",
       "      <th>Fuel</th>\n",
       "      <th>Insurance</th>\n",
       "      <th>Maintance</th>\n",
       "      <th>Repairs</th>\n",
       "      <th>Taxes and Fees</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>year 1</th>\n",
       "      <td>1.404627</td>\n",
       "      <td>0.326389</td>\n",
       "      <td>0.064713</td>\n",
       "      <td>0.109118</td>\n",
       "      <td>0.008873</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.263589</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>year 2</th>\n",
       "      <td>0.250612</td>\n",
       "      <td>0.265980</td>\n",
       "      <td>0.066653</td>\n",
       "      <td>0.112944</td>\n",
       "      <td>0.032748</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.018801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>year 3</th>\n",
       "      <td>0.220336</td>\n",
       "      <td>0.199585</td>\n",
       "      <td>0.068653</td>\n",
       "      <td>0.116901</td>\n",
       "      <td>0.021072</td>\n",
       "      <td>0.002656</td>\n",
       "      <td>0.016844</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>year 4</th>\n",
       "      <td>0.252884</td>\n",
       "      <td>0.126593</td>\n",
       "      <td>0.070716</td>\n",
       "      <td>0.120992</td>\n",
       "      <td>0.125131</td>\n",
       "      <td>0.033705</td>\n",
       "      <td>0.015276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>year 5</th>\n",
       "      <td>0.230750</td>\n",
       "      <td>0.046380</td>\n",
       "      <td>0.072827</td>\n",
       "      <td>0.125214</td>\n",
       "      <td>0.085873</td>\n",
       "      <td>0.052559</td>\n",
       "      <td>0.015276</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "info    Depreciation  Financing      Fuel  Insurance  Maintance   Repairs  \\\n",
       "year 1      1.404627   0.326389  0.064713   0.109118   0.008873  0.000000   \n",
       "year 2      0.250612   0.265980  0.066653   0.112944   0.032748  0.000000   \n",
       "year 3      0.220336   0.199585  0.068653   0.116901   0.021072  0.002656   \n",
       "year 4      0.252884   0.126593  0.070716   0.120992   0.125131  0.033705   \n",
       "year 5      0.230750   0.046380  0.072827   0.125214   0.085873  0.052559   \n",
       "\n",
       "info    Taxes and Fees  \n",
       "year 1        0.263589  \n",
       "year 2        0.018801  \n",
       "year 3        0.016844  \n",
       "year 4        0.015276  \n",
       "year 5        0.015276  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yearly_mean_ev=ev_fraction.groupby('info').mean()/15000\n",
    "yearly_mean_ev=yearly_mean_ev.T\n",
    "#yearly_mean_ev['yearly']=round(yearly_mean_ev.sum(axis=1, numeric_only=True),2)\n",
    "yearly_mean_ev"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "159ba13a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "yearly_mean_ev.plot.bar(stacked=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ad2a5b5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
